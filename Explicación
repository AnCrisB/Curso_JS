Es un lenguaje debilmente tipeado (varias exigencias), convección forzada (convertir un valor numero a srting), se usa sobre browser(pagina web):
Es un lenguaje interpretado que necesita dos entornos:
- Navegador parte visual
- Navegador parte consola

Caracteristicas:
Como se declaran?
"let" "var" "const"
Ej: let userName = 'Max';
    userName = 'Manu';
Las variables declaradas pueden cambiar de contenido
Ej: const totalUsers = 15;
totalUsers = 20; xxxxxxxxxxx

- PERMITIDO
  let userName -> Best Practice camelCase
  let ageGroup5 -> Only letter and digits
  let $kind0fSpecial -> Starting with $ is allowed
  let _internalValue -> Starting with _ is allowed

- TIPO DE DATOS
    - Numbers
    - Strings (text)
    - Boleano
    - Objecto
    - Arrays

- OPERATORS

- CONDICIONALES LOGICOS
  AND (*)
  OR (+)
  Ej: CondA AND CondB OR CondC (Se ejectua primero el AND a menos que se ponga un paréntesis)
  Ej: name == 'Max' && age == 30 || is Admin

- OPERADORES BOLEANOS
=== compara igualdad estricta incluyendo el tipo de dato

- LOOPS
    for loop:
      Ejectuta código a cierta cantidad de tiempos (con contador variable)
      Ej: for (let i = 0; i < 3; i++)
          {
            console.log(i);
          }
          Para ir de uno en uno, para ir de dos es 
          i = i + 2
          i += 2

    for-of loop:
      Ejecuta for cada elemento in un arreglo
      Ej: for (const el of array)
          {
            console.log(el);
          }

    for-in loop:
      Ejecuta por cada llave en un objeto
      Ej: for (const key in obj)
          {
        console.log(key); muestra la llave
        console.log(obj[key]); muestra el valor de la llave
          }
    while loop:

------------------    
LET vs VAR vs CONST
let (local) es reconocida solo donde esta encerrada en {} (Toma el alcance mas cercano; es decir, que si se repite dentro de una función, afecta pero tambien reconoce el global)
var (global) es reconocida por todo el programa
const es una variable que no va a cambiar
-----------------

Si queremos ver todos los elementos del array usamos "for"
console-log(i); 
console.log(el);
console.log(key); muestra la llave
console.log(obj[key]); muestra el valor de la llave

Use constantes como sea posible para ser claro sobre tus intenciones
- Variables
- Tipos de datos (estos se manejan como objetos)

Interacción con HTML

EJEMPLOS:
------------------------------------------------------------
a = 12
12
console.log(a);
-- Muestra 12 en la consola
document.write(a);
-- Muestra 12 en la página
------------------------------------------------------------
permiso=true
true
if (permiso) { alert ('Bienvenido');} else {alert('No tiene permiso');}
-- Bienvenido--
permiso=false
false
if (permiso) { alert ('Bienvenido');} else {alert('No tiene permiso');}
-- No tiene permiso

-------------------------------------------------------------------------------------------------------
FUNCIONES EN JS
A parte de servir para reutilizar codigo sirve para simplificar el codigo algoritmo (fraccionar) y puedo llamar en una sola linea.

Como llamo al paquete de funciones?

function mifuncion(parémtro1,parámetro2,..)
  {"conjunto de linea de instrucciones
    return(resultado);  (Toda funcion debe tener una instruccion que devuelve el llamado de la función, implica la terminacion de la funcion devolviendo un resultado)
  }

Ej: funcion que evalue sin un numero es par o no
fuction evaluarpar (n)
{
  if (n%2 == 0)
  { return (true) } (Aqui termina la función cumpla o no la condición)
  else
  { return (false) }
}

¡Los parametros de una funcion solo se ven afectados dentro de ella, no se llaman fuera de la función!

Si tengo parámetro y envio un argumento sale mensaje (no definido)

- Valores Predeterminados
Ej:
function showMessage(from, text = anotherFunction()) {

  alert(from + ":" + text)
  // anotherFunction() solo se ejecuta si text no fue asignado
  // su resultado se convierte en el valor de texto
}

fuction anotherFuction(){return("Hola que tal?")}
---Acá ya defini la funcion para que devuelva "Hola que tal?"

Mostrar Mensaje('Ann'); //Ann: ¿Hola! (*)

//funcion predefinida del lenguajE
alert('Saludo')
prompt('Cuál es tu nombre?', 'Pepe')

alert(confirm('Acepta o cancela')) //Devuelve un valor tipo Booleano

function shoMessage() {
    let message = 'Hola ¡Soy JS!'
    alert (message);
}

---------------------------------------------------------------------------------------------------------------------------------------
Como es un lenguaje interpretado, primero se definen y declaran las funciones y luego se escribe el programa principal
- FUNCIONES FLECHA
Se llaman asi porque utilizan una flecha para indicar lo que se debe hacer en el proceso o función. Sirve para reducir lineas de codigo
  Sintaxis: (si es un solo parámetro no necesito paréntesis)
  Ej1:

    var miFuncion = (par1, par2) o par1 + par2;(Asi como se acaba de escribir, reemplaza:
    function miFuncion (par1, par2)
    {
      resultado = par1 + par2;
      return (resultado);
    })

  //Función tradicional
  fuction miFuncion (a){
    return + 100;
  }
    - Cuando hay un solo parámetro, no es necesario encerrar entre paréntesis

  //Función flecha
  let mifuncion = a => a + 100; (dado a ejecute/devuelva a + 100, ese valor se va a almacenar en la variable "miFuncion")
  resultado = mifuncion (12); (la variable almacena el valor de 112)

  Ej2:
  //Función tradicional
  fuction miFuncion (a,b){
    return a + b + 100;
  }
    - Cuando hay un solo parámetro, no es necesario encerrar entre paréntesis
    
  //Función flecha
  let mifuncion = (a,b) => a + b + 100; (dado a ejecute/devuelva a + 100, ese valor se va a almacenar en la variable "miFuncion")
  resultado = mifuncion (12.12); (la variable almacena el valor de 124)

  Ej3:
  // Función flecha con varias lineas
  let miFuncion2 = a => {
    let b = 1;
    return (a + b) * 2;
  }
      A veces las funciones son mas elaboradas, si se necesita mas de una linea se escriben unas llave de apertura en cierre; pero, sin son mas de un parámetro necesito

  let miFuncion3 = (a, b) => {
        let c = 1;
        return (a + c) * b;
      }

  Ej4:
  // Mas o menos lo mismo que: let duplicar = function(n) {return n * 2}
  // funtion duplicar (n) {return n*2}

  let duplicar = n => n *2;
  alert(duplicar(3)); //6

---------------------------------------------------------------
MÉTODOS Y FUNCIONES APLICABLES A LOS OBJETOS TIPO 2ARRAY" EN JS
---------------------------------------------------------------
Push         Slice
Pop          indexdf
Concat       firEach
Join         map

// let 1 = [];
const 1 = m.map(element => elemt.forEach.map (e => e))
console.log(1);

Ej1: 
const arreglo = [1, 2, 3]; #array llamado arreglo
array.push(4); #Agrega un elemento a la ultima posicion de un arreglo
console.log(array) //[1, 2, 3, 4] (extension quokka.js)

const lastElement = arreglo.pop(); #Saca el ultimo elemento del arreglo
console.log(lastElement); //99
console.log(arreglo); //[1, 2, 3]
##No todos modifican el arreglo sobre el cual estan actudando.

const array1 = [1, 2];
const array2 = [3, 4];

const newArray = array1.concat(array2);
console.log(newArray); // 1, 2, 3, 4
console.log(array1); // 1, 2
console.log(array2); // 3, 4
##Concat, devuelve otro vector y no modifica

const miArray = [1, 2, 3];
const joinedString = miArray.join('-'); //1-2-3
console.logjoin
  ## Convierte un vector en una cadena/string con todos sus elementos, separados pos un guión

const array3 = [3, 9, 5, 4, 3];
const sliceArray = array3.slice (1, 4); posicion 1 hasta la 4, sin tomar la 4 
console.log(sliceArray); //[9, 5, 4]
console.log(array3); //Muestra arreglo original
  ## El metodo slice sobre un arreglo, hace que se obtenga un subarreglo, pero no lo modifica ni lo transforma

const primerIndice = array3.IndexOf(3);
console.log(Indice); //0
  ## IndezOf obtine el indice donde se encuentra el valor 3 de izq a derecha

const ultimoIndice = array3.lastIndexOf(3);
console.log(Indice); //4
  ## Toma el primero de derecha a izq

const array4 = [1, 2, 3];
array4.forEach (e => {
  console.log(e); //0, 1, 2, 3, 99
});
console.log(array4); [0, 1, 2, 3, 99]

const array4 = [0, 1, 2, 3, 9];
array4.forEach (e => {
  console.log(e**2); //0, 1, 4, 9, 81
});
console.log(array4); [0, 1, 2, 3, 99]
 ## Recive como parametro como un funcion que indica lo que debe hacer "de array 4 para cada elemento e, muestrelo en consola no devuelve ningun valor, solo recorre el vector

const array = [0, 1, 2, 3, 9];
const mappeArray = array5.map(elem => elem *2);
console.log(array5); [0, 1, 2, 3, 9]
console.log(mappeArray); [0, 2, 4, 6, 12]
toma cada elemento del arreglo implicado en el metodo lo devuelve y almacena en variable

const array6 = [1, 2, 3, 4, 5, 9, 8, 7, 6, 5, 4];
const arrayFiltrado = array6.filter(element => element > 2);
console.log(arrayFiltrado);
console.log(array6); 
 ## Para c/elemento de array6 filtre todo aquello que sea mayor que 2. Para array6 (vector) filtre todos los elementos que cumplen la condicion, no modifica pero si devuelve un subarreglo a partir de la condición.

console.log(array6, reverse());
console.log(array6)
 ## Invierte y afecta el arreglo

 console.log(array.shift()); //4
 console.log(array6); 
 ## El metodo job quita el ultimo, y el shift quita el primero

 cont array7 = array6(1, 2); indice 1 y toma 2 elementos a partir de ese indice
 console.log(array6);
 console.log(array7);
 ## El metodo splice recorta el arreglo, se usa para agregar(TAREA)

 delete(array6[1]); Pide elimine el elemento 1, es un valor indefinido, el espacio que ahí (la longitud del vector es la misma)
 console.log(array6);

 - Si pongo const, no puedo cambair el arreglo, pero si puedo cambiar el objeto del arreglo.

 - ¿Como elimino un elemento de la mitad del arreglo? Con Slice

const array8 = [1, 4, 40, 10, 8, 7, 90, 121];
console.log(array8.sort()); 1,10, 121,4,40,7,8,90
console.los(array8) 1,10,121,4,40,7,8,99
https://www.todojs.com/usar-correctamente-el-metodo-sort/ explicacion de caso de error sort

https://www.freecodecamp.org/espanol/news/javascript-splice-como-ulitizar-el-metodo-splice-de-arreglo-en-js/#:~:text=El%20m%C3%A9todo%20splice()%20es,eliminados%20como%20un%20nuevo%20arreglo Metodo splice

const array8 = [1, 4, 40, 10, 8, 7, 90, 121];
console.log(array8.sort((a,b) => a-b)); 1,10, 121,4,40,7,8,90
console.los(array8) 1,10,121,4,40,7,8,99

Ej.
let ciudades = [ "Zaragoza", "madrid", "Barcelona", "Ávila"];
console.log(ciudades.sort((a, b) => a.localCompare(b)));
//

-----------------------------------------------------------
DESTRUCTURING O DESESTRUCTURACIÓN
const elements = [5, 2];
const [first, last] = elements;    // first = 5, last = 2
  ·· En el primer caso, bastante obvio, extraemos el primer y segundo valor del array elements en una variable denominada first y otra llamada last.

const elements = [5, 4, 3, 2];
const [first, second] = elements;  // first = 5, second = 4, rest = discard
  ·· hacemos lo mismo en las variables first y second, pero como el array tiene más elementos y sólo hemos indicado dos variables (first y second), el resto son descartadas.

const elements = [5, 4, 3, 2];
const [first, , third] = elements; // first = 5, third = 3, rest = discard
  ·· pasa muy parecido, excepto que en el segundo parámetro de la parte izquierda, no colocamos ningún elemento, por lo tanto, ese dato se descartará.
  

const elements = [4];
const [first, second] = elements;  // first = 4, second = undefined
  ·· nos pasa al contrario, y hay menos elementos que variables, por lo que first toma el primer (y único) elemento y second se queda sin ningún valor (obtiene el valor undefined).

## El truco en estos cuatro casos está en que en la parte derecha utilizamos los [] para indicar que se trata de un array, pero en la parte izquierda los utilizamos para indicar que hacemos una desestructuración.

Ej de clase:

let a, b, c, loQueQueda;
//[a, b] = [10, 20];
console.log(a); 10
// Expected output: 10
console.log(b); 20
// Expected output: 20

[a, b,...loQueQueda] = [10, 20, 30, 40, 50]; ... 
console.log(a); 10
console.log(b); 20
console.log(c); undefined
console.log(loQueQueda); [30,40,50]


[a, b, c, ...loQueQueda] = [10, 20, 30, 40, 50]; ... 
console.log(a); 10
console.log(b); 20
console.log(c); 30
console.log(loQueQueda); [40,50]

[a, b, c, ...loQueQueda] = [10, "Grupo R4", 30, 40, 50]; ... 
console.log(a); 10
console.log(b); Grupo R4
console.log(c); 30
console.log(loQueQueda); [40,50]

var m = [];
    m [0] = [1, 2, 3, 4];
    m [1] = [5, 6, 7, 8];
    m [2] = [9, 0, 1, 2];
    m [3] = [3, 4, 5, 6];
    m [4] = [7, 8, 9, 0];
    
    matriz de 5 filas y 4 columnas

    liberia math libreria maiz liberia random

------------------------------------------------------------
DOM (Document Objtect Model/Modelo del documento basado en objetos)
"DOM es un modelo de datos basado en objetos y en estructuras de árboles". Es una representacion de todos los documentos que estan en HTML. Permite acceder al HTML para cambiar estilos y contenidos o agregar/ quitar propiedad (manipularlo)

Como funciona
"DOM es un árbol y es formado por elementos y atributos.
Los elementos son etiquetas y los atributos son atributos (propiedades) de los elementos.
Los elementos tienen atributos y los atributos tienen valores.
Los atributos tienen nombre y valor"
- Parte de un documento principal, este tiene dos secciones 
    1. Head: Etiqueta del head sería "Meta y Title"
    2. Body: Etiquetas ilimitadas (div, p (estas se pueden identificar a partir del id, class, tag o name))
Ej:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>El Objeto Documento</h1>
    <h2>El addEventListener() Method</h2>
    <p>Clock en cualquier parte del documento para desplegar "Hello World!"</p>
    <p id="demo">Nada</p>

    <script>
        document.addEventListener("click",miFuncionClick);
        document.addEventListener("dblclick",miFuncion);
        document.addEventListener("copy",miFuncion);

        function miFuncionClick() {
            document.getElementById("demo").innerHTML = "Usted está intentando hacer Click";
        }
        function miFuncion() {
            document.getElementById("demo").innerHTML = "Usted está intentando hacer copiar";
        }
    </script>
</body>
</html>

PROCEDIMIENTO PARA EL DOM
1. Crear elemento y lo poblamos 
2. Creamos contenido
3. Averiguamos el padre y lo añadimos(insertChild/openChild)


------------------------------------
Variables simple: datos unicos (entero, estring, etc)
Variables estructuradas: conjunto de datos
- Diccionarios
        miDiccionario = {"nombre":"Juan",
                         "edad": 22,
                         "peso":"75"}

Una estructura análoga en JS es map
        miMapa = new Map ();
- Tiene elementos constitutivos por clave/valor a diferencia de Python, agrego/modifico elementos
        miMapa.set("nombre","Alejandra");

- METODO "GET"
        persona = miMapa.get("nombre");
 La persona tendrá el valor de Alejandra. El GET (trae/toma el valor) esta ligado con el SET (plantea valor)

 Map es, al igual que Objet, una colección de datos identificados por claves. La principal diferencia es que Map permite claves de cualquier tipo.

https://es.javascript.info/map-set 
Los métodos y propiedades son:

new Map() – crea el mapa.
map.set(clave, valor)) – almacena el valor asociado a la clave.
map.get(clave) – devuelve el valor de la clave. Será undefined si la clave no existe en map.
map.has(clave) – devuelve "true" si la clave existe en map, false si no existe.
map.delete(clave) – elimina el elemento con esa clave.
map.clear() – elimina todo de map.
map.size – tamaño, devuelve la cantidad actual de elementos.